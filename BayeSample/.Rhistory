if(is.null(options.sample[["p1"]])){
p1 <- 0.5
}else{
p1 <- options.sample[["p1"]]
}
if(is.null(options.sample[["effecttype"]])){
stop("Please define the type of effect size in the argument options.sample.")
}
effecttype <- options.sample[["effecttype"]]
findp2 <- function(ES, p1, effecttype){
if(effecttype == "OR"){
num <- ES*(p1/(1-p1))
denom <- 1+ES*(p1/(1-p1))
p2 <- num/denom
} else if(effecttype == "RR"){
p2 <- p1*ES
} else if(effecttype == "AR"){
p2 <- p1+ES
}
return(p2)
}
print(effecttype)
if(effecttype == "OR" | effecttype == "logOR"){
if(effecttype == "logOR") {ES <- exp(ES)} #replace log odds ratio by odds ratio
p1 <- p1
p2 <- findp2(ES = ES, p1 = p1, effecttype = "OR")
}
if(effecttype == "RR"){
findp1RR <- function(RR){
i <- 2
p1 <- p1
while(1/i * RR >= 1){
p1 <- 1/(i+1)
i <- i+1
}
return(p1)
}
p1 <- findp1RR(RR = ES)
p2 <- findp2(ES = ES, p1 = p1, effecttype = "RR")
}
if(effecttype == "AR"){
if(ES >= 1) stop("Absolute risk can only take values between 0 and 1")
findp1AR <- function(AR){ # findp1: Find two values whose sum is smaller than one
i <- 2
p1 <- p1
while(1/i + AR >= 1){
p1 <- 1/(i+2)
i <- i+1
}
return(p1)
}
p1 <- findp1AR(AR = ES)
p2 <- findp2(ES = ES, p1 = p1, effecttype = "AR")
}
x <- stats::rbinom(n, size = 1, prob = p1)
y <- stats::rbinom(n, size = 1, prob = p2)
return(cbind(x, y))
}
bfSSD(N=100, boundary=6, ES=3, alternative="two.sided",prior=prior,Tsim=1000, httype="proportion", options.sample)$power
sample.abtest <- function(n, ES, options.sample=NULL) {
#增加p1的初始值
if(is.null(options.sample[["p1"]])){
p1 <- 0.5
}else{
p1 <- options.sample[["p1"]]
}
if(is.null(options.sample[["effecttype"]])){
stop("Please define the type of effect size in the argument options.sample.")
}
effecttype <- options.sample[["effecttype"]]
findp2 <- function(ES, p1, effecttype){
print(effecttype)
if(effecttype == "OR"){
print(effecttype)
print(p1)
num <- ES*(p1/(1-p1))
denom <- 1+ES*(p1/(1-p1))
p2 <- num/denom
} else if(effecttype == "RR"){
p2 <- p1*ES
} else if(effecttype == "AR"){
p2 <- p1+ES
}
return(p2)
}
print(effecttype)
if(effecttype == "OR" | effecttype == "logOR"){
if(effecttype == "logOR") {ES <- exp(ES)} #replace log odds ratio by odds ratio
p1 <- p1
p2 <- findp2(ES = ES, p1 = p1, effecttype = "OR")
}
if(effecttype == "RR"){
findp1RR <- function(RR){
i <- 2
p1 <- p1
while(1/i * RR >= 1){
p1 <- 1/(i+1)
i <- i+1
}
return(p1)
}
p1 <- findp1RR(RR = ES)
p2 <- findp2(ES = ES, p1 = p1, effecttype = "RR")
}
if(effecttype == "AR"){
if(ES >= 1) stop("Absolute risk can only take values between 0 and 1")
findp1AR <- function(AR){ # findp1: Find two values whose sum is smaller than one
i <- 2
p1 <- p1
while(1/i + AR >= 1){
p1 <- 1/(i+2)
i <- i+1
}
return(p1)
}
p1 <- findp1AR(AR = ES)
p2 <- findp2(ES = ES, p1 = p1, effecttype = "AR")
}
x <- stats::rbinom(n, size = 1, prob = p1)
y <- stats::rbinom(n, size = 1, prob = p2)
return(cbind(x, y))
}
bfSSD(N=100, boundary=6, ES=3, alternative="two.sided",prior=prior,Tsim=1000, httype="proportion", options.sample)$power
options.sample
as.numeric("0.2")
as.numeric(0.2)
sample.abtest <- function(n, ES, options.sample=NULL) {
#增加p1的初始值
if(is.null(options.sample[["p1"]])){
p1 <- 0.5
}else{
p1 <- as.numeric(options.sample[["p1"]])
}
if(is.null(options.sample[["effecttype"]])){
stop("Please define the type of effect size in the argument options.sample.")
}
effecttype <- options.sample[["effecttype"]]
findp2 <- function(ES, p1, effecttype){
if(effecttype == "OR"){
num <- ES*(p1/(1-p1))
denom <- 1+ES*(p1/(1-p1))
p2 <- num/denom
} else if(effecttype == "RR"){
p2 <- p1*ES
} else if(effecttype == "AR"){
p2 <- p1+ES
}
return(p2)
}
print(effecttype)
if(effecttype == "OR" | effecttype == "logOR"){
if(effecttype == "logOR") {ES <- exp(ES)} #replace log odds ratio by odds ratio
p1 <- p1
p2 <- findp2(ES = ES, p1 = p1, effecttype = "OR")
}
if(effecttype == "RR"){
findp1RR <- function(RR){
i <- 2
p1 <- p1
while(1/i * RR >= 1){
p1 <- 1/(i+1)
i <- i+1
}
return(p1)
}
p1 <- findp1RR(RR = ES)
p2 <- findp2(ES = ES, p1 = p1, effecttype = "RR")
}
if(effecttype == "AR"){
if(ES >= 1) stop("Absolute risk can only take values between 0 and 1")
findp1AR <- function(AR){ # findp1: Find two values whose sum is smaller than one
i <- 2
p1 <- p1
while(1/i + AR >= 1){
p1 <- 1/(i+2)
i <- i+1
}
return(p1)
}
p1 <- findp1AR(AR = ES)
p2 <- findp2(ES = ES, p1 = p1, effecttype = "AR")
}
x <- stats::rbinom(n, size = 1, prob = p1)
y <- stats::rbinom(n, size = 1, prob = p2)
return(cbind(x, y))
}
bfSSD(N=100, boundary=6, ES=3, alternative="two.sided",prior=prior,Tsim=1000, httype="proportion", options.sample)$power
sample.abtest <- function(n, ES, options.sample=NULL) {
#增加p1的初始值
if(is.null(options.sample[["p1"]])){
p1 <- 0.5
}else{
p1 <- as.numeric(options.sample[["p1"]])
}
if(is.null(options.sample[["effecttype"]])){
stop("Please define the type of effect size in the argument options.sample.")
}
effecttype <- options.sample[["effecttype"]]
findp2 <- function(ES, p1, effecttype){
if(effecttype == "OR"){
num <- ES*(p1/(1-p1))
denom <- 1+ES*(p1/(1-p1))
p2 <- num/denom
} else if(effecttype == "RR"){
p2 <- p1*ES
} else if(effecttype == "AR"){
p2 <- p1+ES
}
return(p2)
}
if(effecttype == "OR" | effecttype == "logOR"){
if(effecttype == "logOR") {ES <- exp(ES)} #replace log odds ratio by odds ratio
p1 <- p1
p2 <- findp2(ES = ES, p1 = p1, effecttype = "OR")
}
if(effecttype == "RR"){
findp1RR <- function(RR){
i <- 2
p1 <- p1
while(1/i * RR >= 1){
p1 <- 1/(i+1)
i <- i+1
}
return(p1)
}
p1 <- findp1RR(RR = ES)
p2 <- findp2(ES = ES, p1 = p1, effecttype = "RR")
}
if(effecttype == "AR"){
if(ES >= 1) stop("Absolute risk can only take values between 0 and 1")
findp1AR <- function(AR){ # findp1: Find two values whose sum is smaller than one
i <- 2
p1 <- p1
while(1/i + AR >= 1){
p1 <- 1/(i+2)
i <- i+1
}
return(p1)
}
p1 <- findp1AR(AR = ES)
p2 <- findp2(ES = ES, p1 = p1, effecttype = "AR")
}
x <- stats::rbinom(n, size = 1, prob = p1)
y <- stats::rbinom(n, size = 1, prob = p2)
return(cbind(x, y))
}
bfSSD(N=100, boundary=6, ES=3, alternative="two.sided",prior=prior,Tsim=1000, httype="proportion", options.sample)$power
shiny::runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp('D:/软件/大论文/sampleApp/BayeSample')
PSSD <- function(a_a, b_a,n_d, p_d, p0, delta,lambda,N,Textparam=NULL,CNname=c("分析先验α","分析先验β","设计先验nd","设计先验p","发生率p0","δ","λ"),
tips=list(
a_a="beta分布的第一个参数，用于分析先验beta(α，β)",
b_a="beta分布的第一个参数，用于分析先验beta(α，β)",
n_d =" 用于控制设计先验的参数，nd=-1表示nd趋于无穷大，此时设计先验为单点分布",
p_d="用于控制设计先验的参数，即备择假设下疗效值的先验信息",
p0="对照组或历史数据提供的发生率的参考值",
delta="可接受的疗效差异",
lambda="分析先验下试验成功的概率",
N="样本量"
),
defaultValue=list(a_a=0.2, b_a=0.8, n_d=-1, p_d=0.5, p0=0.2, delta=0, lambda=0.99, gamma=0.8)
){
u <- function(m){
calc_power(a_a=a_a, b_a=b_a, n_d=n_d, p_d=p_d, p0=p0, delta=delta, lambda,i=m)
}
power <- mapply(u,N)
return(list(sample=N, power = power))
}
runApp('D:/软件/大论文/sampleApp/BayeSample')
calc_power <- function( a_a=0.2, b_a=0.8, n_d=-1, p_d=0.5, p0=0.2, delta=0, lambda=0.99, gamma=0.8, i)
{
a_d <- 0
b_d <- 0
if ( n_d != -1 ) {
a_d <- n_d * p_d + 1
b_d <- n_d * ( 1 - p_d ) + 1
}
a <- c(0)
x <- c(0)
a <- pre.post.beta ( a_a, b_a, p0, delta, i )
if ( max( a[,3] ) > lambda ) {
n <- a[a[,3]==min(a[a[,3]>lambda,3]),1]#n
s <- a[a[,3]==min(a[a[,3]>lambda,3]),2]#要取得满足max( a[,3] ) > lambda的最小s是多少,s/n
pn.s <- a[a[,2]==s,3]#后验概率
#
b <- pred.dist( n_d, p_d, a_d, b_d, lambda, n, s, pn.s )
}
return(b[5])
}
runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp('D:/软件/大论文/sampleApp/BayeSample')
b
a <- paste0("区间长度为",b)
a
runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp('D:/软件/大论文/sampleApp/BayeSample')
new.sample = list(len=len, lambda=lambda, level=level, sample=sample,conclusion=conclusion)
runApp('D:/软件/大论文/sampleApp/BayeSample')
tt7 <- data.frame(len=1，rr="ss")
tt7 <- data.frame(len=1,rr="ss")
tt7
tt7[-1]
tt7[1:-1]
tt7[1:]
tt7[1:2]
tt7[1:1]
tt7[:-1]
tt7[-1]
tt7[0:-1]
tt7 <- data.frame(len=1,rr="ss",oo="s")
tt7[0:-1]
tt7[-1]
tt7[-2]
tt7[:-2]
tt7[0:-2]
tt7
tt7[,-2]
tt7[,-1]
tt7[1:2]
runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp()
runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp('D:/软件/大论文/sampleApp/BayeSample')
inv.ANDus = function(prior_mean,prior_sd,prior_size,N,alpha,Textparam=NULL,CNname=c("先验均值","先验方差","先验样本","样本量","α"),
tips=list(prior_mean="正态分布的第一个参数,假设两组疗效差异服从该正态分布",
prior_sd="正态分布的第二个参数,假设两组疗效差异服从该正态分布",
prior_size="先验信息能提供的样本量",
N="传统方法所需的样本量",
alpha="I类错误的概率"
),
defaultValue=list(prior_mean=2.5,prior_sd=7.14,prior_size=25,alpha=0.05)
){
nsimu <- 10000
u <- function(post.size){
sim.pow = rep(0, nsimu)
for(i in 1:nsimu){
# sample chisq for sigma since (n-1)*s^2/sigma^2 ~chisq(n-1)
sd = sqrt((prior_size-1)*prior_sd^2/rchisq(1,df=prior_size-1))
# calculate the standard deviation for the mean
prior_sdm = sqrt(2/prior_size)*sd # prior sd for the mean
post.sdm  = sqrt(2/post.size)*sd # posterior sd for the mean
# sample the prior
Delta = rnorm(1, prior_mean,prior_sdm)
# with the sampled prior, calculate the power
sim.pow[i] = pnorm(qnorm(1-alpha/2)*post.sdm,mean=Delta, sd=post.sdm,lower.tail=FALSE,log.p=FALSE)
} # end of i-loop
# assurance is the average of simulated power
mean(sim.pow)
}
#sqrt.inv = inversed(u, lower=0, upper=30000)
#sample <- sqrt.inv(assurance)
assurance <- mapply(u, N)
conclusion <- paste0("在α为",alpha,",样本量为",N[1],"，两组均数差异服从N(",prior_mean,"，",prior_sd,")，先验样本量为",prior.size,"时，试验的平均功效为",assurance[1])
new.sample <- list(prior_mean=prior_mean,prior_sd=prior_sd,prior_size=prior_size,assurance=assurance, sample=N,conclusion=conclusion)
}
inv.ANDus = function(prior_mean,prior_sd,prior_size,N,alpha,Textparam=NULL,CNname=c("先验均值","先验方差","先验样本","样本量","α"),
tips=list(prior_mean="正态分布的第一个参数,假设两组疗效差异服从该正态分布",
prior_sd="正态分布的第二个参数,假设两组疗效差异服从该正态分布",
prior_size="先验信息能提供的样本量",
N="传统方法所需的样本量",
alpha="I类错误的概率"
),
defaultValue=list(prior_mean=2.5,prior_sd=7.14,prior_size=25,alpha=0.05)
){
nsimu <- 10000
u <- function(post.size){
sim.pow = rep(0, nsimu)
for(i in 1:nsimu){
# sample chisq for sigma since (n-1)*s^2/sigma^2 ~chisq(n-1)
sd = sqrt((prior_size-1)*prior_sd^2/rchisq(1,df=prior_size-1))
# calculate the standard deviation for the mean
prior_sdm = sqrt(2/prior_size)*sd # prior sd for the mean
post.sdm  = sqrt(2/post.size)*sd # posterior sd for the mean
# sample the prior
Delta = rnorm(1, prior_mean,prior_sdm)
# with the sampled prior, calculate the power
sim.pow[i] = pnorm(qnorm(1-alpha/2)*post.sdm,mean=Delta, sd=post.sdm,lower.tail=FALSE,log.p=FALSE)
} # end of i-loop
# assurance is the average of simulated power
mean(sim.pow)
}
#sqrt.inv = inversed(u, lower=0, upper=30000)
#sample <- sqrt.inv(assurance)
assurance <- mapply(u, N)
conclusion <- paste0("在α为",alpha,",样本量为",N[1],"，两组均数差异服从N(",prior_mean,"，",prior_sd,")，先验样本量为",prior.size,"时，试验的平均功效为",assurance[1])
new.sample <- list(prior_mean=prior_mean,prior_sd=prior_sd,prior_size=prior_size,assurance=assurance, sample=N,conclusion=conclusion)
}
runApp('D:/软件/大论文/sampleApp/BayeSample')
round(9.3000,2)
round(9.3200,2)
round(9.32001,2)
runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp()
runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp()
runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp('D:/软件/大论文/sampleApp/BayeSample')
runApp('D:/软件/大论文/sampleApp/BayeSample')
install.packages('rsconnect')
install.packages('rsconnect')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='bayessd',
token='5041A898C0793B05864F6CF83A38BC47',
secret='ePq6SYrut9ILWcR8YpN5vze2wqY2qh/JNaTcw4oQ')
token='5041A898C0793B05864F6CF83A38BC47',
secret='<SECRET>')
rsconnect::setAccountInfo(name='bayessd',
token='5041A898C0793B05864F6CF83A38BC47',
secret='ePq6SYrut9ILWcR8YpN5vze2wqY2qh/JNaTcw4oQ')
token='5041A898C0793B05864F6CF83A38BC47',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='bayessd',
token='5041A898C0793B05864F6CF83A38BC47',
secret='ePq6SYrut9ILWcR8YpN5vze2wqY2qh/JNaTcw4oQ')
rsconnect::deployApp(getwd())
rsconnect::deployApp("D:\\软件\\大论文\\sampleApp\\BayeSample")
warnings()
rsconnect::deployApp("D:\\软件\\大论文\\sampleApp\\BayeSample")
warningd()
warnings()
rsconnect::deployApp("D:\\软件\\大论文\\sampleApp\\BayeSample")
runApp('D:/软件/大论文/sampleApp/BayeSample')
rsconnect::deployApp("D:\\软件\\大论文\\sampleApp\\BayeSample")
rsconnect::deployApp("D:\\软件\\大论文\\sampleApp\\BayeSample")
rsconnect::deployApp("D:\\软件\\大论文\\sampleApp\\BayeSample")
rsconnect::deployApp("D:\\软件\\大论文\\sampleApp\\BayeSample")
runApp('D:/软件/大论文/sampleApp/BayeSample')
rsconnect::deployApp("D:\\软件\\大论文\\sampleApp\\BayeSample")
rsconnect::deployApp("D:\\软件\\大论文\\sampleApp\\BayeSample")
c("非序贯" = "one","序贯" = "two")
shiny::runApp('D:/软件/大论文/sampleApp/BayeSample')
shiny::runApp('D:/软件/大论文/sampleApp/BayeSample')
rsconnect::deployApp("D:\\软件\\大论文\\sampleApp\\BayeSample")
R.version
runApp('D:/软件/大论文/sampleApp/BayeSample')
sessionInfo()
runApp('D:/软件/大论文/sampleApp/BayeSample')
font_home <- function(path = '') file.path('~', '.fonts', path)
if (Sys.info()[['sysname']] == 'Linux' &&
system('locate wqy-zenhei.ttc') != 0 &&
!file.exists(font_home('wqy-zenhei.ttc'))) {
if (!file.exists('wqy-zenhei.ttc'))
curl::curl_download(
'https://github.com/rstudio/shiny-examples/releases/download/v0.10.1/wqy-zenhei.ttc',
'wqy-zenhei.ttc'
)
dir.create(font_home())
file.copy('wqy-zenhei.ttc', font_home())
system2('fc-cache', paste('-f', font_home()))
}
rm(font_home)
if (.Platform$OS.type == "windows") {
if (!grepl("Chinese", Sys.getlocale())) {
warning(
"You probably want Chinese locale on Windows for this app",
"to render correctly. See ",
"https://github.com/rstudio/shiny/issues/1053#issuecomment-167011937"
)
}
}
font_home <- function(path = '') file.path('~', '.fonts', path)
if (Sys.info()[['sysname']] == 'Linux' &&
system('locate wqy-zenhei.ttc') != 0 &&
!file.exists(font_home('wqy-zenhei.ttc'))) {
if (!file.exists('wqy-zenhei.ttc'))
curl::curl_download(
'https://github.com/rstudio/shiny-examples/releases/download/v0.10.1/wqy-zenhei.ttc',
'wqy-zenhei.ttc'
)
dir.create(font_home())
file.copy('wqy-zenhei.ttc', font_home())
system2('fc-cache', paste('-f', font_home()))
}
rm(font_home)
if (.Platform$OS.type == "windows") {
if (!grepl("Chinese", Sys.getlocale())) {
warning(
"You probably want Chinese locale on Windows for this app",
"to render correctly. See ",
"https://github.com/rstudio/shiny/issues/1053#issuecomment-167011937"
)
}
}
rsconnect::deployApp("D:\\软件\\大论文\\sampleApp\\BayeSample")
.Platform$OS.type
grepl("Chinese", Sys.getlocale())
rsconnect::deployApp("D:\\软件\\大论文\\sampleApp\\BayeSample")
rsconnect::deployApp("D:\\软件\\大论文\\sampleApp\\BayeSample")
Sys.info()[['sysname']]
rsconnect::deployApp("D:\\软件\\大论文\\sampleApp\\BayeSample")
rsconnect::deployApp("D:\\软件\\大论文\\sampleApp\\BayeSample")
rsconnect::deployApp("D:\\软件\\大论文\\sampleApp\\BayeSample")
rsconnect::deployApp("D:\\软件\\大论文\\sampleApp\\BayeSample")
x2 <- iconv(x, 'GB2312', 'UTF-8') Encoding(x2)
x2 <- iconv(x, 'GB2312', 'UTF-8')
x2
Encoding(x2)
x2 <- iconv('中文', 'GB2312', 'UTF-8')
Encoding(x2)
shiny::runApp('D:/软件/大论文/sampleApp/BayeSample')
